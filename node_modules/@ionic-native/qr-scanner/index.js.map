{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/qr-scanner/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,iBAAiB,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AACxE,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkHd,6BAAiB;;;;IAE9C;;;OAGG;;;;;IAIH,2BAAO;;;;kBAA+B,MAAM,CAAC,EAAE;IAE/C;;;OAGG;;;;;IAMH,wBAAI;;;;kBAAyB,MAAM,CAAC,EAAE;IAEtC;;;OAGG;;;;;IAEH,wBAAI;;;;kBAA+B,MAAM,CAAC,EAAE;IAE5C;;;OAGG;;;;;IAEH,wBAAI;;;;kBAA+B,MAAM,CAAC,EAAE;IAE5C;;;OAGG;;;;;IAIH,+BAAW;;;;kBAA+B,MAAM,CAAC,EAAE;IAEnD;;;OAGG;;;;;IAEH,2BAAO;;;;kBAA+B,MAAM,CAAC,EAAE;IAE/C;;;OAGG;;;;;IAIH,gCAAY;;;;kBAA+B,MAAM,CAAC,EAAE;IAEpD;;;OAGG;;;;;IAIH,kCAAc;;;;kBAA+B,MAAM,CAAC,EAAE;IAEtD;;;OAGG;;;;;IAIH,iCAAa;;;;kBAA+B,MAAM,CAAC,EAAE;IAErD;;;;OAIG;;;;;;IAIH,6BAAS;;;;;cAAC,MAAc,IAA8B,MAAM,CAAC,EAAE;IAE/D;;;OAGG;;;;;IAEH,gCAAY;;;;kBAA+B,MAAM,CAAC,EAAE;IAEpD;;;OAGG;;;;;IAEH,iCAAa;;;;kBAA+B,MAAM,CAAC,EAAE;IAErD;;;OAGG;;;;;IAEH,6BAAS;;;;kBAA+B,MAAM,CAAC,EAAE;IAEjD;;OAEG;;;;IAIH,gCAAY;;;mBAAW;;gBArHxB,UAAU;;;;;QAOR,OAAO,CAAC;YACP,aAAa,EAAE,MAAM;SACtB,CAAC;;;;4CAC6C;;QAM9C,OAAO,CAAC;YACP,aAAa,EAAE,MAAM;YACrB,UAAU,EAAE,IAAI;YAChB,aAAa,EAAE,YAAY;SAC5B,CAAC;;;wCACM,UAAU;yCAAoB;;QAMrC,OAAO,EAAE;;;;yCACkC;;QAM3C,OAAO,EAAE;;;;yCACkC;;QAM3C,OAAO,CAAC;YACP,aAAa,EAAE,MAAM;SACtB,CAAC;;;;gDACiD;;QAMlD,OAAO,EAAE;;;;4CACqC;;QAM9C,OAAO,CAAC;YACP,aAAa,EAAE,MAAM;SACtB,CAAC;;;;iDACkD;;QAMnD,OAAO,CAAC;YACP,aAAa,EAAE,MAAM;SACtB,CAAC;;;;mDACoD;;QAMrD,OAAO,CAAC;YACP,aAAa,EAAE,MAAM;SACtB,CAAC;;;;kDACmD;;QAOpD,OAAO,CAAC;YACP,aAAa,EAAE,MAAM;SACtB,CAAC;;;;8CAC6D;;QAM9D,OAAO,EAAE;;;;iDAC0C;;QAMnD,OAAO,EAAE;;;;kDAC2C;;QAMpD,OAAO,EAAE;;;;8CACuC;;QAKhD,OAAO,CAAC;YACP,IAAI,EAAE,IAAI;SACX,CAAC;;;;iDACqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IApHZ,SAAS;QARrB,MAAM,CAAC;YACN,UAAU,EAAE,WAAW;YACvB,MAAM,EAAE,0BAA0B;YAClC,SAAS,EAAE,WAAW;YACtB,IAAI,EAAE,oDAAoD;YAC1D,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACpD,CAAC;OAEW,SAAS,EAsHrB;oBA1OD;EAoH+B,iBAAiB;SAAnC,SAAS","sourcesContent":["import { Plugin, IonicNativePlugin, Cordova } from '@ionic-native/core';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nexport interface QRScannerStatus {\r\n  /**\r\n   * On iOS and Android 6.0+, camera access is granted at runtime by the user (by clicking \"Allow\" at the dialog).\r\n   * The authorized property is a boolean value which is true only when the user has allowed camera access to your app (AVAuthorizationStatus.Authorized).\r\n   * On platforms with permissions granted at install (Android pre-6.0, Windows Phone) this property is always true.\r\n   */\r\n  authorized: boolean;\r\n  /**\r\n   * A boolean value which is true if the user permanently denied camera access to the app (AVAuthorizationStatus.Denied).\r\n   * Once denied, camera access can only be gained by requesting the user change their decision (consider offering a link to the setting via openSettings()).\r\n   */\r\n  denied: boolean;\r\n  /**\r\n   * A boolean value which is true if the user is unable to grant permissions due to parental controls, organization security configuration profiles, or similar reasons.\r\n   */\r\n  restricted: boolean;\r\n  /**\r\n   * A boolean value which is true if QRScanner is prepared to capture video and render it to the view.\r\n   */\r\n  prepared: boolean;\r\n  /**\r\n   * A boolean value which is true when the preview layer is visible (and on all platforms but browser, the native webview background is transparent).\r\n   */\r\n  showing: boolean;\r\n  /**\r\n   * A boolean value which is true if QRScanner is actively scanning for a QR code.\r\n   */\r\n  scanning: boolean;\r\n  /**\r\n   * A boolean value which is true if QRScanner is displaying a live preview from the device's camera. Set to false when the preview is paused.\r\n   */\r\n  previewing: boolean;\r\n  /**\r\n   * A boolean value which is true if the light is enabled.\r\n   */\r\n  lightEnabled: boolean;\r\n  /**\r\n   * A boolean value which is true only if the users' operating system is able to QRScanner.openSettings().\r\n   */\r\n  canOpenSettings: boolean;\r\n  /**\r\n   * A boolean value which is true only if the users' device can enable a light in the direction of the currentCamera.\r\n   */\r\n  canEnableLight: boolean;\r\n  /**\r\n   * A boolean value which is true only if the current device \"should\" have a front camera.\r\n   * The camera may still not be capturable, which would emit error code 3, 4, or 5 when the switch is attempted.\r\n   * (On the browser platform, this value is false until the prepare method is called.)\r\n   */\r\n  canChangeCamera: boolean;\r\n  /**\r\n   * A number representing the index of the currentCamera. 0 is the back camera, 1 is the front.\r\n   */\r\n  currentCamera: number;\r\n}\r\n\r\n/**\r\n * @name QR Scanner\r\n * @description\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { QRScanner, QRScannerStatus } from '@ionic-native/qr-scanner';\r\n *\r\n *\r\n * constructor(private qrScanner: QRScanner) { }\r\n *\r\n * ...\r\n *\r\n * // Optionally request the permission early\r\n * this.qrScanner.prepare()\r\n *   .then((status: QRScannerStatus) => {\r\n *      if (status.authorized) {\r\n *        // camera permission was granted\r\n *\r\n *\r\n *        // start scanning\r\n *        let scanSub = this.qrScanner.scan().subscribe((text: string) => {\r\n *          console.log('Scanned something', text);\r\n *\r\n *          this.qrScanner.hide(); // hide camera preview\r\n *          scanSub.unsubscribe(); // stop scanning\r\n *        });\r\n *\r\n *        // show camera preview\r\n *        this.qrScanner.show();\r\n *\r\n *        // wait for user to scan something, then the observable callback will be called\r\n *\r\n *      } else if (status.denied) {\r\n *        // camera permission was permanently denied\r\n *        // you must use QRScanner.openSettings() method to guide the user to the settings page\r\n *        // then they can grant the permission from there\r\n *      } else {\r\n *        // permission was denied, but not permanently. You can ask for permission again at a later time.\r\n *      }\r\n *   })\r\n *   .catch((e: any) => console.log('Error is', e));\r\n *\r\n *\r\n * ```\r\n * @interfaces\r\n * QRScannerStatus\r\n */\r\n@Plugin({\r\n  pluginName: 'QRScanner',\r\n  plugin: 'cordova-plugin-qrscanner',\r\n  pluginRef: 'QRScanner',\r\n  repo: 'https://github.com/bitpay/cordova-plugin-qrscanner',\r\n  platforms: ['Android', 'Browser', 'iOS', 'Windows']\r\n})\r\n@Injectable()\r\nexport class QRScanner extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Request permission to use QR scanner.\r\n   * @return {Promise<QRScannerStatus>}\r\n   */\r\n  @Cordova({\r\n    callbackStyle: 'node'\r\n  })\r\n  prepare(): Promise<QRScannerStatus> { return; }\r\n\r\n  /**\r\n   * Call this method to enable scanning. You must then call the `show` method to make the camera preview visible.\r\n   * @return {Observable<string>} returns an Observable that emits the scanned text. Unsubscribe from the observable to stop scanning.\r\n   */\r\n  @Cordova({\r\n    callbackStyle: 'node',\r\n    observable: true,\r\n    clearFunction: 'cancelScan'\r\n  })\r\n  scan(): Observable<string> { return; }\r\n\r\n  /**\r\n   * Configures the native webview to have a transparent background, then sets the background of the <body> and <html> DOM elements to transparent, allowing the webview to re-render with the transparent background.\r\n   * @returns {Promise<QRScannerStatus>}\r\n   */\r\n  @Cordova()\r\n  show(): Promise<QRScannerStatus> { return; }\r\n\r\n  /**\r\n   * Configures the native webview to be opaque with a white background, covering the video preview.\r\n   * @returns {Promise<QRScannerStatus>}\r\n   */\r\n  @Cordova()\r\n  hide(): Promise<QRScannerStatus> { return; }\r\n\r\n  /**\r\n   * Enable the device's light (for scanning in low-light environments).\r\n   * @returns {Promise<QRScannerStatus>}\r\n   */\r\n  @Cordova({\r\n    callbackStyle: 'node'\r\n  })\r\n  enableLight(): Promise<QRScannerStatus> { return; }\r\n\r\n  /**\r\n   * Destroy the scanner instance.\r\n   * @returns {Promise<QRScannerStatus>}\r\n   */\r\n  @Cordova()\r\n  destroy(): Promise<QRScannerStatus> { return; }\r\n\r\n  /**\r\n   * Disable the device's light.\r\n   * @return {Promise<QRScannerStatus>}\r\n   */\r\n  @Cordova({\r\n    callbackStyle: 'node'\r\n  })\r\n  disableLight(): Promise<QRScannerStatus> { return; }\r\n\r\n  /**\r\n   * Use front camera\r\n   * @return {Promise<QRScannerStatus>}\r\n   */\r\n  @Cordova({\r\n    callbackStyle: 'node'\r\n  })\r\n  useFrontCamera(): Promise<QRScannerStatus> { return; }\r\n\r\n  /**\r\n   * Use back camera\r\n   * @return {Promise<QRScannerStatus>}\r\n   */\r\n  @Cordova({\r\n    callbackStyle: 'node'\r\n  })\r\n  useBackCamera(): Promise<QRScannerStatus> { return; }\r\n\r\n  /**\r\n   * Set camera to be used.\r\n   * @param camera {number} Provide `0` for back camera, and `1` for front camera.\r\n   * @return {Promise<QRScannerStatus>}\r\n   */\r\n  @Cordova({\r\n    callbackStyle: 'node'\r\n  })\r\n  useCamera(camera: number): Promise<QRScannerStatus> { return; }\r\n\r\n  /**\r\n   * Pauses the video preview on the current frame and pauses scanning.\r\n   * @return {Promise<QRScannerStatus>}\r\n   */\r\n  @Cordova()\r\n  pausePreview(): Promise<QRScannerStatus> { return; }\r\n\r\n  /**\r\n   * Resumse the video preview and resumes scanning.\r\n   * @return {Promise<QRScannerStatus>}\r\n   */\r\n  @Cordova()\r\n  resumePreview(): Promise<QRScannerStatus> { return; }\r\n\r\n  /**\r\n   * Returns permission status\r\n   * @return {Promise<QRScannerStatus>}\r\n   */\r\n  @Cordova()\r\n  getStatus(): Promise<QRScannerStatus> { return; }\r\n\r\n  /**\r\n   * Opens settings to edit app permissions.\r\n   */\r\n  @Cordova({\r\n    sync: true\r\n  })\r\n  openSettings(): void {}\r\n\r\n}\r\n"]}